{"version":3,"sources":["core/instance.js","core/users.services.js","core/actions.js","core/actionsTypes.js","components/users/Users.jsx","components/users/Pagination.jsx","components/users/UsersContainer.jsx","components/users/users.constants.js","components/forms/usersForm.validate.js","components/forms/FormsElements.jsx","components/forms/Form.jsx","components/forms/UserCreateForm.jsx","App.js","serviceWorker.js","components/users/usersReducer.js","core/store.js","index.js"],"names":["instance","axios","create","baseURL","headers","apiUsers","get","userData","post","put","id","userId","delete","getAllUsersThunk","dispatch","a","data","status","updateUsersAC","users","type","Users","deleteUser","updateUserDataThunk","useState","name","surname","desc","setUserData","cencel","forEach","user","editState","editUserData","e","target","value","editStateUser","Number","className","scope","map","index","key","onChange","onClick","saveUser","Pagination","listPages","anotherPage","page","connect","state","usersReducer","deleteUserThunk","useEffect","currentPage","setCurrentPage","currentUsers","numberOfPages","lastUser","firstUser","slice","getCurrentPages","i","Math","ceil","length","push","getListPages","requiredField","inputForm","input","meta","touched","error","warning","style","color","reduxForm","form","props","onSubmit","handleSubmit","htmlFor","Field","component","placeholder","validate","addNewUserThunk","reset","marginBottom","App","Boolean","window","location","hostname","match","initState","reducers","combineReducers","action","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.fafea836.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({    \r\n    baseURL:'http://77.120.241.80:8911/api',\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n\r\n\r\nexport default instance;","import instance from '../core/instance';\r\n\r\nexport const apiUsers = {\r\n    getAllUsers: () => {\r\n        return instance.get('/users');\r\n    },\r\n    postNewUser: (userData) => {\r\n        return instance.post('/users', userData);\r\n    },\r\n    putNewUserData: (userData) => {\r\n        return instance.put(`/user/${userData.id}`, userData);\r\n    },\r\n    deleteUser: (userId) => {\r\n        return instance.delete(`/user/${userId}`);\r\n    }\r\n}","import { UPDATE_USERS } from \"./actionsTypes\";\r\n\r\nimport { apiUsers } from './users.services';\r\n\r\nexport const getAllUsersThunk = () => {\r\n    return async (dispatch) => {\r\n        const {data, status} = await apiUsers.getAllUsers();\r\n        if(status === 200) {\r\n            dispatch(updateUsersAC(data));\r\n        }\r\n    }; \r\n};\r\n\r\nexport const addNewUserThunk = (userData) => {\r\n    return async (dispatch) => {\r\n        const { status } = await apiUsers.postNewUser(userData);\r\n        if(status === 200) {\r\n            dispatch(getAllUsersThunk());\r\n        }\r\n    };\r\n};\r\n\r\nexport const updateUserDataThunk = (userData) => {\r\n    return async (dispatch) => {\r\n        const { status } = await apiUsers.putNewUserData(userData)\r\n        if(status === 200) {\r\n            dispatch(getAllUsersThunk())\r\n        }\r\n    };\r\n};\r\n\r\nexport const deleteUserThunk = (userId) => {\r\n    return async (dispatch) => {\r\n        const response = await apiUsers.deleteUser(userId)\r\n        if(response.status === 200) {\r\n            dispatch(getAllUsersThunk())\r\n        }\r\n    };\r\n};\r\n\r\nexport const updateUsersAC = (users) => ({type: UPDATE_USERS, users});","export const UPDATE_USERS = \"UPDATE_USERS\"","import React, { useState } from 'react';\r\n\r\n\r\nconst Users = ({users, deleteUser, updateUserDataThunk}) => {\r\n    const [userData, setUserData] = useState({id: \"\", name:\"\", surname:\"\", desc:\"\"});\r\n    const cencel = () => {\r\n        users.forEach(user => {\r\n            user.editState = false;\r\n        });\r\n        setUserData(({id: \"\", name:\"\", surname:\"\", desc:\"\"}));\r\n    }\r\n    //save your changes\r\n    const saveUser = (user) => {\r\n        const {editState, ...userData} = user;\r\n        if(userData.id && userData.name && userData.surname && userData.desc) {\r\n            updateUserDataThunk(userData);\r\n            cencel();\r\n        }\r\n    }  \r\n    const editUserData = (e) => {\r\n        switch(e.target.name){\r\n            case \"name\": \r\n                setUserData({...userData, name: e.target.value});      \r\n                break;\r\n            case \"surname\":\r\n                setUserData({...userData, surname: e.target.value}); \r\n                break;\r\n            case \"desc\":\r\n                setUserData({...userData, desc: e.target.value}); \r\n                break;    \r\n        }\r\n    }\r\n    const editStateUser = (e) => {\r\n        users.forEach(user => {\r\n            if(user.id === Number(e.target.id)) { \r\n                user.editState = true;\r\n                setUserData(user);\r\n            }\r\n        });\r\n    }\r\n\r\n    return <>\r\n        <div className=\"container\">\r\n            <table className=\"table table-striped\">\r\n                   <thead>\r\n                    <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Name</th>\r\n                    <th scope=\"col\">Username</th>\r\n                    <th scope=\"col\">Description</th>\r\n                    <th scope=\"col\">Edit</th>\r\n                    <th scope=\"col\">Delete</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {users.map((user, index) => {\r\n                        return  <tr key={user.id}>\r\n                            { user.editState ?\r\n                                <>\r\n                                    <th scope=\"row\">{index+1}</th>\r\n                                    <td><input className=\"form-control\" value={userData.name}  onChange={editUserData} name=\"name\"/></td>\r\n                                    <td><input className=\"form-control\" value={userData.surname} onChange={editUserData} name=\"surname\"/></td>\r\n                                    <td><input className=\"form-control\" value={userData.desc}  onChange={editUserData} name=\"desc\"/></td>\r\n                                    <td><button className=\"btn\" onClick={()=>saveUser(userData)} id={user.id}>Save</button></td>\r\n                                    <td><button className=\"btn\" onClick={cencel}>Cencel</button></td>\r\n                                </>\r\n                                :\r\n                                <> \r\n                                    <th scope=\"row\">{index+1}</th>\r\n                                    <td>{user.name}</td>\r\n                                    <td>{user.surname}</td>\r\n                                    <td>{user.desc}</td>\r\n                                    <td><button className=\"btn\" onClick={editStateUser} id={user.id}>Edit</button></td>\r\n                                    <td><button className=\"btn\" onClick={deleteUser} id={user.id}>Delete</button></td>\r\n                                </>\r\n                            } \r\n                        </tr>\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        \r\n    </>\r\n}\r\n\r\nexport default Users;\r\n","import React from 'react';\r\nimport './style.css';\r\n\r\nconst Pagination = ({listPages, anotherPage}) => {\r\n    return <div className=\"container col-lg-2\">\r\n        <ul>\r\n            {listPages.map(page => {\r\n                return (\r\n                    <li\r\n                    key={page}\r\n                    id={page}\r\n                    onClick={anotherPage}\r\n                    >\r\n                    {page}\r\n                    </li>\r\n                )\r\n            })}\r\n        </ul>\r\n    </div>\r\n}\r\n\r\nexport default Pagination;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getAllUsersThunk, updateUserDataThunk, deleteUserThunk } from '../../core/actions';\r\nimport Users from './Users';\r\nimport Pagination from './Pagination';\r\nimport { getCurrentPages, getListPages } from './users.constants';\r\n\r\nconst UsersContainer = ({getAllUsersThunk, updateUserDataThunk, users, deleteUserThunk}) => {\r\n    useEffect(()=> {\r\n        getAllUsersThunk();\r\n    }, [])\r\n    let listPages = [];\r\n    const [currentPage,  setCurrentPage] = useState(1);\r\n    //calculating actual users\r\n    const  numberOfPages = 5;\r\n    const currentUsers = getCurrentPages(currentPage, numberOfPages, users);\r\n\r\n    //change the current page\r\n    const anotherPage = (e) => setCurrentPage(e.target.id);\r\n    const deleteUser = (e) => {\r\n        deleteUserThunk(e.target.id);\r\n    }\r\n    listPages = getListPages(users, numberOfPages)\r\n    return <>\r\n        <Users \r\n            users={currentUsers} \r\n            deleteUser={deleteUser}\r\n            updateUserDataThunk={updateUserDataThunk}/>\r\n        <Pagination listPages={listPages} anotherPage={anotherPage} />\r\n    </>\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.usersReducer.users\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, { getAllUsersThunk, updateUserDataThunk, deleteUserThunk })(UsersContainer);\r\n","export const getCurrentPages = (currentPage,numberOfPages, users) => {\r\n    const lastUser = currentPage * numberOfPages;\r\n    const firstUser = lastUser - numberOfPages;\r\n    const currentUsers = users.slice(firstUser, lastUser);\r\n    return currentUsers;\r\n}\r\n\r\nexport const getListPages = (users, numberOfPages) => {\r\n    const listPages = [];\r\n    for (let i = 1; i <= Math.ceil(users.length / numberOfPages); i++) {\r\n        listPages.push(i);\r\n    }\r\n    return listPages\r\n} ","export const requiredField = (value) => {\r\n    if(!value) {\r\n        return 'This field should not be empty'\r\n    } else {\r\n        return null\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport const inputForm = ({ input, meta: {touched, error, warning}, ...props }) => {\r\n    return <>\r\n        <input className=\"form-control\" {...input}/>\r\n        { touched &&\r\n            ((error && <span style={{color:\"red\"}}>{error}</span>))\r\n\r\n        }\r\n    </>\r\n}","import React from 'react';\r\nimport { reduxForm, Field } from 'redux-form';\r\nimport { requiredField } from './usersForm.validate';\r\nimport { inputForm } from './FormsElements';\r\nconst Form = (props) => {\r\n    return <form onSubmit={props.handleSubmit}>\r\n            <div className=\"form-row\">\r\n                <div className=\"col-md-4 mb-3\">\r\n                    <label htmlFor=\"name\">Name</label>\r\n                    <Field name=\"name\" type=\"text\" component={inputForm}  id=\"name\" placeholder=\"Name\" validate={[requiredField]}/>\r\n                </div>\r\n                <div className=\"col-md-4 mb-3\">\r\n                    <label htmlFor=\"surname\">Surname</label>\r\n                    <Field name=\"surname\" type=\"text\" component={inputForm} className=\"form-control\" id=\"surname\" placeholder=\"Surname\" validate={[requiredField]}/>\r\n                </div>\r\n                <div className=\"col-md-3 mb-3\">\r\n                    <label htmlFor=\"description\">Description</label>\r\n                    <Field name=\"desc\" type=\"text\" component={inputForm} className=\"form-control\" id=\"description\" placeholder=\"Description\" validate={[requiredField]}/>\r\n                </div>\r\n            </div>\r\n            <button className=\"btn btn-primary\" type=\"submit\">Submit form</button>\r\n        </form>\r\n}\r\n\r\n \r\nexport default reduxForm({form:\"createNewUser\"})(Form);","import React from 'react';\r\nimport Form from './Form';\r\nimport {reset} from 'redux-form';\r\nimport { connect } from 'react-redux';\r\nimport { addNewUserThunk } from '../../core/actions';\r\n\r\nconst UserCreateForm = ({addNewUserThunk, reset}) => {\r\n    const onSubmit = (userData) => {\r\n        addNewUserThunk(userData);\r\n        reset('createNewUser');\r\n    }\r\n    return <div className=\"container\" style={{marginBottom:\"20px\"}}>\r\n        <h1>Create new user</h1>\r\n        <Form onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\n\r\nexport default connect((state)=>({}), {addNewUserThunk, reset})(UserCreateForm)","import React from 'react';\nimport './App.css';\nimport UsersContainer from './components/users/UsersContainer';\nimport UserCreateForm from './components/forms/UserCreateForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <UserCreateForm/>\n      <UsersContainer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { UPDATE_USERS } from \"../../core/actionsTypes\"\r\n\r\nconst initState = {\r\n    users:[]\r\n}\r\n\r\nexport const usersReducer = (state = initState, action) => {\r\n    switch(action.type) {\r\n        case UPDATE_USERS:\r\n            return {\r\n                ...state, \r\n                users: action.users\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { usersReducer } from '../components/users/usersReducer';\r\nimport { reducer as formReducer } from 'redux-form';\r\n\r\nconst reducers = combineReducers({usersReducer, form:formReducer}); \r\nconst store = createStore(reducers, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './core/store' \nimport { BrowserRouter } from 'react-router-dom';\nimport 'normalize.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}